<!doctype html>
<html lang="en">

<head>
    <title>Planner Leon (c) 20023 </title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <meta name="description" content="" />
    <meta name="viewport" content="width=device-width" />
    <!-- <base href="/" /> -->

    <!-- <link href="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.css" rel="stylesheet" type="text/css" />
    <link href="https://unpkg.com/vis-timeline@latest/styles/vis-timeline-graph2d.min.css" rel="stylesheet"
        type="text/css" /> -->

    <link href="w2ui.css" rel="stylesheet" type="text/css" />
    <link href="vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />

    <style>
        .vis-item.bookingcom {
            background-color: rgb(134, 10, 128);
            border-color: rgb(95, 21, 83);
            color: rgb(199, 14, 14);
        }

        .vis-item.walkin {
            background-color: darkgreen;
            border-color: darkgreen;
            color: whitesmoke;
        }

        .vis-item.abnb {
            background-color: red;
            border-color: red;
            color: white;
        }


        .vis-item.closed {
            background-color: black;
            border-color: black;
            color: black;
        }


        .vis-item.vis-selected {
            color: black;
        }
    </style>


    <!-- <script src="http://ajax.googleapis.com/ajax/libs/jquery/3.5.0/jquery.min.js" type="text/javascript"></script>
    <script src="https://rawgit.com/vitmalina/w2ui/master/dist/w2ui.js" type="text/javascript"></script>
    <script src="https://unpkg.com/vis-timeline@latest/standalone/umd/vis-timeline-graph2d.min.js"
        type="text/javascript"></script> -->

    <script src="jquery.min.js" type="text/javascript"></script>
    <script src="w2ui.js" type="text/javascript"></script>
    <script src="vis-timeline-graph2d.min.js" type="text/javascript"></script>

</head>

<body>
    <div id="myForm" style="width:'100%';height:'100%'"></div>

    <br>
    <div id="visualization"></div>
    <br>

    <script>

        var nowISOString = new Date().toISOString().substring(0, 10);


        // initialise vis timeline componenet 
        var groups = new vis.DataSet();
        var items = new vis.DataSet();
        var container = document.getElementById('visualization');

        var options = {


            maxHeight: 640,
            horizontalScroll: true,
            verticalScroll: true,
            zoomKey: "ctrlKey",

            start: Date.now() - 1000 * 60 * 60 * 24 * 2, // minus 3 days
            end: Date.now() + 1000 * 60 * 60 * 24 * 17, // plus 1 months aprox.

            zoomMin: 1000 * 60 * 60 * 24 * 16,             // 16  day in milliseconds
            zoomMax: 1000 * 60 * 60 * 24 * 29 * 1,         // about 1  months in milliseconds


            clickToUse: true,
            stack: true,

            // editable: false,

            editable: {
                add: false,
                remove: true
            },



            orientation: {
                axis: "both",
                item: "top"
            },

            showMinorLabels: true,
            timeAxis: { scale: 'day', step: 1 },
            format: {
                minorLabels: {
                    millisecond: '',
                    second: '',
                    minute: '',
                    hour: '',
                    weekday: '',
                    day: 'DD ddd',
                    month: '',
                    year: ''
                }
            }


        };
        timeline = new vis.Timeline(container, null, options);
        timeline.setGroups(groups);
        timeline.setItems(items);




        // add some rooms   
        var roomList = [];  // for the dropdown  select room 

        for (let i = 1; i < 10; i++) {
            var idVal = 'r' + i;
            var descVal = 'Room ' + i;

            roomList.push({
                id: idVal,
                text: descVal
            });

            groups.add({
                id: idVal,
                content: descVal
                // , order: 1
            });
        }




        var agencyList = [
            { id: 'abnb', text: 'AirBnB' },
            { id: 'bookingcom', text: 'Booking.com' },
            { id: 'walkin', text: 'Walk-in' },
            { id: 'closed', text: 'Closed' },
        ];

        // set globals 
        w2utils.settings.dateFormat = 'yyyy-mm-dd';
        // w2utils.settings.currencyPrefix = '€';



        // setup form with w2ui 
        $(function () {


            $('#myForm').w2form({
                name: 'myForm',

                // header: 'Form with Toolbar',

                // toolbar: {
                //     items: [
                //         { id: 'bt1', type: 'button', text: 'Button 1', img: 'icon-folder' },
                //         { id: 'bt2', type: 'button', text: 'Button 2', img: 'icon-folder' },
                //         { id: 'bt3', type: 'spacer' },
                //         { id: 'bt4', type: 'button', text: 'Reset', img: 'icon-page' },
                //         { id: 'bt5', type: 'button', text: 'Save', img: 'icon-page' }
                //     ],
                //     onClick(event) {
                //         if (event.target == 'bt4') alert('reset test');
                //         if (event.target == 'bt5') alert('save test');
                //     }
                // },




                // need to set url  for save  and get 
                fields: [



                    {
                        field: 'name', type: 'text',
                        required: true,
                        html: {
                            label: 'ΟΝΟΜΑ ΠΕΛΑΤΗ',
                            attr: 'style="width: 300px"'
                        }
                    },

                    // Line   Customer,Agency,Voucher 
                    {
                        field: 'agency', type: 'list',
                        required: true,
                        html: {
                            label: '&nbsp; &nbsp; Agency &nbsp;  &nbsp; ',
                            text: '&nbsp;  %anchorVoucher% &nbsp; &nbsp;',
                            attr: 'style="width: 100px"'
                        },
                        options: { items: agencyList }
                    },
                    {
                        field: 'voucher', type: 'text',
                        html: {
                            label: '&nbsp; &nbsp; Voucher  &nbsp; &nbsp; ',
                            anchor: '%anchorVoucher%',
                            attr: 'style="width: 300px"'
                        }
                    },

                    // Line  Room
                    {
                        field: 'room', type: 'list',
                        required: true,
                        html: {
                            label: 'Room &nbsp;',
                            attr: 'style="width: 100px"'
                        },
                        options: { items: roomList }
                    },



                    // Line 3 startDate, endDate,  numOfNights

                    {
                        field: 'numOfGuests', type: 'int',
                        required: true,
                        html: {
                            label: 'Guests &nbsp; ',
                            text: ' %anchorStartDate% %anchorEndDate%  %anchorNumOfNights%      ',
                            attr: 'style="width: 30px"'
                        },
                        options: { min: 1, max: 6 }
                    },

                    {
                        field: 'startDate', type: 'date',
                        // format: 'd.m.yyyy',  
                        // todo now using isoDate format as vis timeline is configured as iso 
                        required: true,
                        html: {
                            label: '&nbsp;&nbsp;&nbsp;&nbsp; Arrival &nbsp;&nbsp;&nbsp;&nbsp;',
                            anchor: '%anchorStartDate%',
                            attr: 'style="width: 100px"'
                        },
                        options: {
                            start: new Date().toISOString().substring(0, 10) // nowISOString  e.g. '2023-02-25'  
                            // all dates before start will be unselectable
                        }
                    },
                    {
                        field: 'endDate', type: 'date',
                        required: true,
                        // on endDate change  calculate  numOfNights  from start date and endDate  
                        html: {
                            label: '&nbsp;&nbsp;&nbsp;&nbsp; Departure &nbsp;&nbsp;&nbsp;&nbsp; ',
                            anchor: '%anchorEndDate%',
                            attr: 'style="width: 100px"'
                        }
                    },

                    {
                        field: 'numOfNights', type: 'int',
                        required: true,
                        // disabled: true,
                        // Todo:  on numOfNights change  calculate  endDate from start date 
                        html: {
                            label: '&nbsp;&nbsp;&nbsp;&nbsp; Nights &nbsp;&nbsp;&nbsp;&nbsp; ',
                            anchor: '%anchorNumOfNights%',
                            attr: 'style="width: 30px"'
                        },
                        options: { min: 1 }

                    },


                    // Line 4  Money
                    {
                        field: 'charge', type: 'money',
                        // required: true,
                        html: {
                            label: 'ΧΡΕΩΣΗ',
                            text: '€ &nbsp; &nbsp; %anchorReceived% € &nbsp; &nbsp; %anchorBalance% €',
                            attr: 'style="width: 80px"'
                        }
                    },
                    {
                        field: 'received', type: 'money',
                        // required: true,
                        html: {
                            label: '&nbsp; &nbsp; ΠΙΣΤΩΣΗ &nbsp; &nbsp; ',
                            anchor: '%anchorReceived%',
                            attr: 'style="width: 80px"'
                        }
                    },
                    {
                        field: 'balance', type: 'money',
                        // required: true,
                        disabled: true,
                        html: {
                            label: '&nbsp; &nbsp; ΥΠΟΛΟΙΠΟ &nbsp; &nbsp;',
                            anchor: '%anchorBalance%',
                            attr: 'style="width: 80px"'
                        }
                    },

                    // Line 5     Identification, AFM
                    {
                        field: 'identification', type: 'text',
                        // required: true,
                        html: {
                            label: 'ΑΡ.ΔΙΑΒ. ή ΤΑΥΤ. &nbsp;',
                            text: '&nbsp; %anchorAfm% &nbsp; ',
                            attr: 'style="width: 200px"'
                        }
                    },
                    {
                        field: 'afm', type: 'text',
                        // required: true,
                        html: {
                            label: 'Α.Φ.Μ &nbsp;',
                            anchor: '%anchorAfm%',
                            attr: 'style="width: 200px"'
                        }
                    },


                    {
                        field: 'email', type: 'email',
                        html: {
                            label: 'EMAIL',
                            text: '&nbsp; &nbsp; %anchorTel% ',
                            attr: 'style="width: 300px"'
                        }
                    },
                    {
                        field: 'tel', type: 'text',
                        html: {
                            label: 'ΤΗΛ.',
                            anchor: '%anchorTel%',
                            attr: 'style="width: 250x"'
                        }
                    },

                    // Line 5  Extra Info 
                    {
                        field: 'extraInfo', type: 'textarea',
                        html: {
                            label: 'Extra Info',
                            attr: 'style="width: 600px; height: 60px; resize: none" '
                        }
                    },





                ],
                actions: {
                    Reset() {

                        this.clear();
                        w2ui['myForm'].setValue('startDate', new Date().toISOString().substring(0, 10));
                        w2ui['myForm'].setValue('endDate', new Date().toISOString().substring(0, 10));

                        w2ui['myForm'].setValue('balance', 0);
                        w2ui['myForm'].setValue('charge', 0);
                        w2ui['myForm'].setValue('received', 0);

                        w2ui['myForm'].setValue('numOfNights', 0);
                        w2ui['myForm'].setValue('numOfGuests', 0);
                        w2ui['myForm'].refresh();

                        w2alert('Reset action ');

                    },
                    Save() {

                        if (w2ui.myForm.validate().length == 0) {



                            // retrieve a filtered subset of the data
                            var fItems = items.get({
                                filter: function (item) {
                                    var a_start = Date.parse(w2ui.myForm.getValue('startDate'));
                                    var a_end = Date.parse(w2ui.myForm.getValue('endDate'));                             
                                    var b_start = Date.parse(item.start);
                                    var b_end = Date.parse(item.end);

                                    if ( w2ui.myForm.getValue('room').id == item.group ){
                                        if (a_start <= b_start && b_start < a_end) return true;    // b starts in a
                                        if (a_start < b_end   && b_end < a_end) return true;       // b ends in a
                                        if (b_start < a_start && a_end <=  b_end) return true;     // a in b
                                    }
                                    return false;
                                }
                            });
                            if (fItems != null && fItems.length > 0) {

                                w2popup.open({
                                    title: 'That room is already booked',
                                    with: 300,
                                    height: 150,
                                    body: '<pre>That room is already booked to someone else.</pre>',
                                    actions: { Ok: w2popup.close }
                                })


                            } else {
                                // do save  

                                w2popup.open({
                                    title: 'Form Data to save ',
                                    with: 600,
                                    height: 550,
                                    body: `<pre>${JSON.stringify(this.getCleanRecord(), null, 4)}</pre>`,
                                    actions: { Ok: w2popup.close }
                                })


                                var newId = Date.now();
                                items.add({
                                    id: newId,
                                    // type: 'range',
                                    group: w2ui.myForm.getValue('room').id,
                                    start: w2ui.myForm.getValue('startDate'),
                                    end: w2ui.myForm.getValue('endDate'),
                                    content: w2ui.myForm.getValue('name'),
                                    className: w2ui.myForm.getValue('agency').id,
                                    recordData: this.getCleanRecord(),

                                });

                                alert(JSON.stringify(items.get(newId).recordData, null, 4));

                                // start: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),
                                // end: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59),

                                this.save();// todo 


                            }






                        } else {
                            w2alert("Fix problems then do save");
                        }

                    }
                }
            });


            w2ui['myForm'].setValue('startDate', new Date().toISOString().substring(0, 10));
            w2ui['myForm'].setValue('endDate', new Date().toISOString().substring(0, 10));

            w2ui['myForm'].setValue('balance', 0);
            w2ui['myForm'].setValue('charge', 0);
            w2ui['myForm'].setValue('received', 0);

            w2ui['myForm'].setValue('numOfNights', 0);
            w2ui['myForm'].setValue('numOfGuests', 0);
            w2ui['myForm'].refresh();




            w2ui.myForm.on('change', function (event) {


                //  Event: change Target: startDate 
                if (event != null && event.target == 'startDate') {

                    alert(event.detail.value.current)

                    w2ui['myForm'].setValue('endDate', event.detail.value.current);
                    w2ui['myForm'].setValue('numOfNights', 0);
                    w2ui['myForm'].refresh();
                }

                //  Event: change Target: endDate 
                if (event != null && event.target == 'endDate') {

                    var startDateFld = w2ui['myForm'].getValue('startDate');
                    var endDateFld = w2ui['myForm'].getValue('endDate');

                    var date1 = new Date(startDateFld);
                    var date2 = new Date(endDateFld);

                    // To calculate the time difference of two dates
                    var numOfNights = date2.getTime() - date1.getTime();

                    // To calculate the no. of days between two dates
                    var numOfNights = numOfNights / (1000 * 3600 * 24);

                    // set   numOfNights        
                    //  $("#numOfNights").val(numOfNights);   
                    w2ui['myForm'].setValue('numOfNights', numOfNights);
                    w2ui['myForm'].refresh();

                    //  w2ui['form'].set('field_1', { type: 'int' }); 
                    if (numOfNights <= 0) {
                        w2alert("<b>Error: </b> <br><br> Nights must be more than zero please enter correct dates.");
                        w2ui['myForm'].setValue('startDate', nowISOString);
                        w2ui['myForm'].setValue('endDate', nowISOString);
                        w2ui['myForm'].setValue('numOfNights', 0);
                        w2ui['myForm'].refresh();
                    }

                    // else {
                    //     w2alert("Numuber Of Nights is calculated as " + numOfNights + " nigths. <br><br> Start: " + startDateFld + "<br> End: " + endDateFld );
                    // } 
                }

                if (event != null && (event.target == 'received' || event.target == 'charge')) {

                    if (w2ui['myForm'].getValue('charge') < 0) {

                        // w2ui['myForm'].setValue('balance', 0);
                        w2ui['myForm'].setValue('charge', 0);
                        // w2ui['myForm'].setValue('received', 0);
                        w2alert("<b>Error: </b> Can't  charge a negative amount. ");

                    }
                    else if (w2ui['myForm'].getValue('received') >= 0 && w2ui['myForm'].getValue('charge') > 0) {
                        var chargeVal = w2ui['myForm'].getValue('charge');
                        var receivedVal = w2ui['myForm'].getValue('received');
                        var newBalance = chargeVal - receivedVal;
                        w2ui['myForm'].setValue('balance', newBalance);
                        // w2alert("chargeVal: " + chargeVal + "receivedVal: " + receivedVal + " <br> calculated  balance= " + newBalance);
                    }

                }





                w2ui['myForm'].refresh();

            });

            w2ui.myForm.on('*', function (event) {
                // console.log('Event: ' + event.type, 'Target: ' + event.target, event);
            });




            //  Timeline
            timeline.on('click', function (properties) {

                // alert(  JSON.stringify( properties , null, 4)) ;

                if (properties != null && properties.item != null) {
                    var booking = items.get(properties.item);
                    alert("booking          " + JSON.stringify(booking.recordData, null, 4));

                    // todo  load the form with the selected item from the timeline 

                }


                // w2alert('Not me!! The other button');
            });

            // timeline.on('doubleClick', function (properties) {
            //     console.log("Double click event fired");
            //     w2alert('Not me!! The other button');
            // });

        });



    </script>



</body>

</html>